// Code generated by go-bindata.
// sources:
// templates/html/images.html
// templates/html/index.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlImagesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x6f\xd3\x4e\x10\x3d\xff\xf2\x29\xa6\xfe\xf5\x00\x12\x9b\x94\x22\x24\x70\xec\x48\xa8\xb4\xa2\x12\x12\x1c\x52\x09\x8e\x63\xef\xc4\x5e\x75\xbd\x5e\x76\xa7\x69\x8c\xe5\xef\x8e\xd6\x76\x88\xab\x26\xa2\x97\x78\xff\xbc\xf7\x66\xde\x64\x76\xda\x16\x24\x6d\x94\x21\x88\x54\x85\x05\xf9\x08\xba\x2e\x39\xfb\xfc\xed\x6a\xfd\xf3\xfb\x35\x94\x5c\xe9\xd5\x2c\x09\x1f\xd0\x68\x8a\x34\x22\x13\xad\x66\x00\x49\x49\x28\xc3\x02\x20\x61\xc5\x9a\x56\x6d\x0b\xf3\x75\x58\x05\x81\xc5\x70\x36\xdc\x57\xc4\x08\x25\xb3\x15\xf4\xeb\x41\x6d\xd3\xe8\xaa\x36\x4c\x86\xc5\xba\xb1\x14\x41\x3e\xec\xd2\x88\x69\xc7\x8b\x10\x6a\x09\x79\x89\xce\x13\xa7\x77\xeb\x1b\xf1\x21\x9a\xea\x18\xac\x28\x8d\x1c\x6d\xc8\x39\x72\x13\x76\xed\x54\xa1\x4c\x74\x2a\xe6\x0f\x71\xf7\x49\x5c\xd5\x95\x45\x56\x99\x9e\x86\xbd\xbd\x4e\x3f\x46\xb0\x78\x1e\x04\xad\xd5\x24\xaa\x3a\x53\x9a\xc4\x23\x65\x02\xad\x15\x39\x5a\x7c\xca\x6f\x42\xd1\x5e\x4a\xf7\x8c\xfc\xe0\x45\x86\x4e\x78\x6e\x9e\xe8\x64\x1a\xf3\xfb\xa3\x4a\x5f\xd0\xc8\x92\xb4\xbc\x71\x8a\x8c\xd4\xcd\xb4\x66\xee\x81\x8e\x72\xb6\x8a\x1e\x6d\xed\x78\x82\x7d\x54\x92\xcb\x54\xd2\x56\xe5\x24\xfa\xcd\x81\xd9\x27\x03\xdc\x58\x1a\xff\x87\xdc\xfb\xb1\x96\xa0\xaa\x02\xda\xd9\x7f\xfd\xba\xc2\xdd\x40\x8d\xe1\xdd\xc5\x85\xdd\xc1\x99\xaa\x42\x18\x34\xbc\x9c\x40\x4a\x52\x45\xc9\xa7\x31\x16\xa5\x54\xa6\x88\x61\xfe\xde\x51\xb5\x3f\xcd\x6a\x27\xc9\xc5\xf0\xd6\xee\x40\xd6\xcc\x24\xe1\xff\x3c\xcf\x0f\xc2\xae\x50\x46\x64\x35\x73\x5d\xc5\x4f\x98\x52\x79\xab\xb1\x89\x33\x5d\xe7\xf7\xcb\x21\xed\x6e\xf8\x0c\xbf\xf3\xbe\xbb\x8f\xda\xb8\x7c\x81\x8d\x53\x18\x65\x46\x99\x67\x88\x01\x30\xc1\x8d\x5a\xa7\xa4\x0e\x15\xb9\x9c\x1a\xdb\xe8\x1a\x39\xd6\xb4\xe1\xa3\xae\x72\xb4\xac\x6a\xf3\xd7\xd7\xa6\x36\x2c\xbc\xfa\x4d\x31\xf8\x0a\xb5\x5e\x4e\xcf\x37\x58\x29\xdd\xc4\x1e\x8d\x17\x9e\x9c\xda\xfc\xbb\x7a\xc9\xa2\x6f\x8c\xfe\xc5\x2f\xf6\x4f\x3e\xc9\x6a\xd9\x8c\xbd\x01\x6d\x0b\x0e\x4d\x41\x70\xae\xde\xc0\x79\x68\x95\x38\x85\xf9\x6d\x3f\x4b\xa0\xeb\x66\x23\x2c\x91\x6a\x0b\xb9\x46\xef\xd3\x61\xd0\x44\xab\x10\x3c\x09\x04\xef\xf2\x34\x6a\xdb\x9e\x3d\xbf\x51\x9a\x42\x07\x43\xd7\x8d\xdd\x19\x60\xde\xa2\xd9\xd3\x47\xcf\xd1\xea\x55\xcf\x81\xae\x7b\x0d\x7b\xf6\x57\xcc\x48\xf7\x03\x28\x30\xf6\x39\x26\x0b\xa9\xb6\xfb\xcd\x21\x6f\x32\x32\x64\x18\xee\x07\x47\x49\x3f\x7d\x56\x87\xab\x3f\x01\x00\x00\xff\xff\xd9\x09\xf3\x4a\x1e\x05\x00\x00")

func templatesHtmlImagesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlImagesHtml,
		"templates/html/images.html",
	)
}

func templatesHtmlImagesHtml() (*asset, error) {
	bytes, err := templatesHtmlImagesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/images.html", size: 1310, mode: os.FileMode(420), modTime: time.Unix(1534203552, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcb\x6e\xdb\x3a\x10\x5d\x5f\x7f\xc5\x84\x37\x8b\x7b\x81\xd2\x4e\x52\x14\x68\x65\xc9\x40\x91\x07\x9a\x55\xbb\x48\x80\x76\x49\x89\x63\x69\x10\x8a\x62\xc9\x89\x63\x55\xd0\xbf\x17\x7a\xb8\x96\x11\x1b\xcd\x46\xe2\xe3\x9c\x33\x73\x86\x43\x36\x0d\x68\x5c\x93\x45\x10\x64\x35\x6e\x05\xb4\x6d\x7c\x76\xf3\xf5\xfa\xe1\xc7\xb7\x5b\x28\xb8\x34\xab\x59\xdc\xfd\xc0\x28\x9b\x27\x02\xad\x58\xcd\x00\xe2\x02\x95\xee\x06\x00\x31\x13\x1b\x5c\x35\x0d\xcc\xef\x6f\x3a\xf6\x62\x58\x18\x36\x4b\x64\x05\x05\xb3\x93\xf8\xf3\x99\x36\x89\xb8\xae\x2c\xa3\x65\xf9\x50\x3b\x14\x90\x0d\xb3\x44\x30\x6e\x79\xd1\xc5\x59\x42\x56\x28\x1f\x90\x93\xc7\x87\x3b\xf9\x51\x4c\x75\xac\x2a\x31\x11\x1e\xd7\xe8\x3d\xfa\x09\xbb\xf2\x94\x93\x15\xa7\x62\x7e\x97\x8f\x9f\xe5\x75\x55\x3a\xc5\x94\x9a\x69\xd8\xfb\xdb\xe4\x93\x80\xc5\xeb\x20\xca\x39\x83\xb2\xac\x52\x32\x28\x5f\x30\x95\xca\x39\x99\x29\xa7\x0e\xf9\x35\x86\xb7\xd3\x03\x2b\x7e\x0e\x32\x55\x5e\x06\xae\x0f\x74\x52\xa3\xb2\xa7\xa3\x4a\x5f\x94\xd5\x05\x1a\x7d\xe7\x09\xad\x36\xf5\xb4\x66\xfe\x19\x8f\x72\x36\x84\x2f\xae\xf2\x3c\xc1\xbe\x90\xe6\x22\xd1\xb8\xa1\x0c\x65\x3f\xd9\x33\xfb\x64\x80\x6b\x87\xe3\x39\x64\x21\x8c\xb5\x04\x2a\x73\x68\x66\xff\xf4\xe3\x52\x6d\x07\x6a\x04\xef\x2f\x2e\xdc\x16\xce\xa8\xec\xc2\x28\xcb\xcb\x09\xa4\x40\xca\x0b\x3e\x8d\x71\x4a\x6b\xb2\x79\x04\xf3\x0f\x1e\xcb\xdd\x6a\x5a\x79\x8d\x3e\x82\x4b\xb7\x05\x5d\x31\xa3\x86\x7f\xb3\x2c\xdb\x0b\xfb\x9c\xac\x4c\x2b\xe6\xaa\x8c\x0e\x98\x9a\x82\x33\xaa\x8e\x52\x53\x65\x4f\xcb\x21\xed\x76\xf8\x0d\xdf\x39\x95\x2a\xc7\xa3\x36\xae\xde\x60\xe3\x14\x86\xec\x28\xf3\x0a\x31\x00\x26\xb8\x51\xeb\x94\xd4\xbe\x22\x57\x53\x63\x6b\x53\x29\x8e\x0c\xae\xf9\xa8\xab\x4c\x39\xa6\xca\xfe\xf1\xb5\xae\x2c\xcb\x40\xbf\x30\x82\x50\x2a\x63\x96\xd3\xf5\xb5\x2a\xc9\xd4\x51\x50\x36\xc8\x80\x9e\xd6\x7f\xaf\x5e\xbc\xe8\x1b\xa3\xbf\xee\x8b\xdd\x7d\x8f\xd3\x4a\xd7\x63\x6f\x40\xd3\x80\x57\x36\x47\x38\xa7\x77\x70\xde\xb5\x4a\x94\xc0\xfc\xbe\xab\x76\x80\xb6\x9d\x8d\xb0\x58\xd3\x06\x32\xa3\x42\x48\x44\x7f\x14\x62\xd5\x05\x8f\x3b\x42\xf0\x59\x22\x9a\x06\xfa\xc7\x67\xd0\xb8\x80\xb6\x1d\x9b\xb3\x43\x05\xa7\xec\x8e\x3d\x5a\x16\xab\xff\x9a\x06\xce\x09\xda\xf6\x7f\x38\x24\x5f\xf6\x2f\x50\xc7\xd9\x25\x19\x2f\x34\x6d\x76\x93\x7d\xe2\x68\x75\x97\x62\xb7\x3f\x58\x8a\xfb\xe7\x67\xb5\xdf\xfa\x1d\x00\x00\xff\xff\x43\x36\x48\x4e\x1b\x05\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 1307, mode: os.FileMode(420), modTime: time.Unix(1534204134, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/images.html": templatesHtmlImagesHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"images.html": &bintree{templatesHtmlImagesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

