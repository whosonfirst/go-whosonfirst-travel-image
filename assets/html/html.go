// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcb\x6e\xdb\x3a\x10\x5d\x5f\x7f\xc5\x44\x37\x8b\x7b\x81\xd2\x4e\x52\x14\x68\x65\xc9\x40\x91\x07\x9a\x55\xbb\x48\x80\x76\x49\x89\x63\x69\x10\x8a\x64\xc9\x89\x63\x55\xd0\xbf\x17\x7a\xb8\x96\x11\x1b\xcd\x46\xe2\xe3\x9c\x33\x73\x86\x43\x26\x67\x37\x5f\xaf\x1f\x7e\x7c\xbb\x85\x92\x2b\xbd\x9a\x25\xdd\x0f\xb4\x34\x45\x1a\xa1\x89\x56\x33\x80\xa4\x44\xa9\xba\x01\x40\xc2\xc4\x1a\x57\x4d\x03\xf3\xfb\x1b\x68\xdb\x64\x31\x2c\x0c\x9b\x15\xb2\x84\x92\xd9\x09\xfc\xf9\x4c\x9b\x34\xba\xb6\x86\xd1\xb0\x78\xa8\x1d\x46\x90\x0f\xb3\x34\x62\xdc\xf2\xa2\x8b\xb3\x84\xbc\x94\x3e\x20\xa7\x8f\x0f\x77\xe2\x63\x34\xd5\x31\xb2\xc2\x34\xf2\xb8\x46\xef\xd1\x4f\xd8\xd6\x53\x41\x26\x3a\x15\xf3\xbb\x78\xfc\x2c\xae\x6d\xe5\x24\x53\xa6\xa7\x61\xef\x6f\xd3\x4f\x11\x2c\x5e\x07\x91\xce\x69\x14\x95\xcd\x48\xa3\x78\xc1\x4c\x48\xe7\x44\x2e\x9d\x3c\xe4\xd7\x18\xde\x4e\x0f\x2c\xf9\x39\x88\x4c\x7a\x11\xb8\x3e\xd0\xc9\xb4\xcc\x9f\x8e\x2a\x7d\x91\x46\x95\xa8\xd5\x9d\x27\x34\x4a\xd7\xd3\x9a\xf9\x67\x3c\xca\xd9\x10\xbe\x38\xeb\x79\x82\x7d\x21\xc5\x65\xaa\x70\x43\x39\x8a\x7e\xb2\x67\xf6\xc9\x00\xd7\x0e\xc7\x73\xc8\x43\x18\x6b\x09\x54\x15\xd0\xcc\xfe\xe9\xc7\x95\xdc\x0e\xd4\x18\xde\x5f\x5c\xb8\x2d\x9c\x51\xd5\x85\x91\x86\x97\x13\x48\x89\x54\x94\x7c\x1a\xe3\xa4\x52\x64\x8a\x18\xe6\x1f\x3c\x56\xbb\xd5\xcc\x7a\x85\x3e\x86\x4b\xb7\x05\x65\x99\x51\xc1\xbf\x79\x9e\xef\x85\x7d\x41\x46\x64\x96\xd9\x56\xf1\x01\x53\x51\x70\x5a\xd6\x71\xa6\x6d\xfe\xb4\x1c\xd2\x6e\x87\xdf\xf0\x9d\x53\x25\x0b\x3c\x6a\xe3\xea\x0d\x36\x4e\x61\xc8\x8c\x32\xaf\x10\x03\x60\x82\x1b\xb5\x4e\x49\xed\x2b\x72\x35\x35\xb6\xd6\x56\x72\xac\x71\xcd\x47\x5d\xe5\xd2\x31\x59\xf3\xc7\xd7\xda\x1a\x16\x81\x7e\x61\x0c\xa1\x92\x5a\x2f\xa7\xeb\x6b\x59\x91\xae\xe3\x20\x4d\x10\x01\x3d\xad\xff\x5e\xbd\x64\xd1\x37\x46\x7f\xdd\x17\xbb\xfb\x9e\x64\x56\xd5\x63\x6f\x40\xd3\x80\x97\xa6\x40\x38\xa7\x77\x70\xde\xb5\x4a\x9c\xc2\xfc\xbe\xab\x76\x80\xb6\x9d\x8d\xb0\x44\xd1\x06\x72\x2d\x43\x48\xa3\xfe\x28\xa2\x55\x17\x3c\xe9\x08\xc1\xe7\x69\xd4\x34\x40\x46\xe1\x76\xd0\xb8\x80\xb6\x1d\x9b\xb3\x43\x05\x27\xcd\x8e\x3d\x5a\x8e\x56\xff\x35\x0d\x9c\x13\xb4\xed\xff\x70\x48\xbe\xec\x5f\xa0\x8e\xb3\x4b\x32\x59\x28\xda\xec\x26\xfb\xc4\xd1\xa8\x2e\xc5\x6e\x7f\xb0\x94\x2c\x86\xd7\xee\x77\x00\x00\x00\xff\xff\xfb\x35\x40\x95\xfe\x04\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 1278, mode: os.FileMode(420), modTime: time.Unix(1533687685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

